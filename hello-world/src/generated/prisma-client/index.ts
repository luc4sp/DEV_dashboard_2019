// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  user: (where?: UserWhereInput) => Promise<boolean>;
  widget: (where?: WidgetWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  widget: (where: WidgetWhereUniqueInput) => WidgetNullablePromise;
  widgets: (args?: {
    where?: WidgetWhereInput;
    orderBy?: WidgetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Widget>;
  widgetsConnection: (args?: {
    where?: WidgetWhereInput;
    orderBy?: WidgetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WidgetConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWidget: (data: WidgetCreateInput) => WidgetPromise;
  updateWidget: (args: {
    data: WidgetUpdateInput;
    where: WidgetWhereUniqueInput;
  }) => WidgetPromise;
  updateManyWidgets: (args: {
    data: WidgetUpdateManyMutationInput;
    where?: WidgetWhereInput;
  }) => BatchPayloadPromise;
  upsertWidget: (args: {
    where: WidgetWhereUniqueInput;
    create: WidgetCreateInput;
    update: WidgetUpdateInput;
  }) => WidgetPromise;
  deleteWidget: (where: WidgetWhereUniqueInput) => WidgetPromise;
  deleteManyWidgets: (where?: WidgetWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  widget: (
    where?: WidgetSubscriptionWhereInput
  ) => WidgetSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type WidgetType =
  | "WEATHER"
  | "EXCHANGER"
  | "CRYPTOEXCHANGER"
  | "CALCULATOR"
  | "PASSWORD"
  | "RANDOMTHING"
  | "JOKE";

export type WidgetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "settings_ASC"
  | "settings_DESC";

export type UserType = "USER" | "ADMIN";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "type_ASC"
  | "type_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  type?: Maybe<UserType>;
  widgets?: Maybe<WidgetCreateManyInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface WidgetUpdateManyInput {
  create?: Maybe<WidgetCreateInput[] | WidgetCreateInput>;
  update?: Maybe<
    | WidgetUpdateWithWhereUniqueNestedInput[]
    | WidgetUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WidgetUpsertWithWhereUniqueNestedInput[]
    | WidgetUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WidgetWhereUniqueInput[] | WidgetWhereUniqueInput>;
  connect?: Maybe<WidgetWhereUniqueInput[] | WidgetWhereUniqueInput>;
  set?: Maybe<WidgetWhereUniqueInput[] | WidgetWhereUniqueInput>;
  disconnect?: Maybe<WidgetWhereUniqueInput[] | WidgetWhereUniqueInput>;
  deleteMany?: Maybe<WidgetScalarWhereInput[] | WidgetScalarWhereInput>;
  updateMany?: Maybe<
    | WidgetUpdateManyWithWhereNestedInput[]
    | WidgetUpdateManyWithWhereNestedInput
  >;
}

export interface WidgetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<WidgetType>;
  type_not?: Maybe<WidgetType>;
  type_in?: Maybe<WidgetType[] | WidgetType>;
  type_not_in?: Maybe<WidgetType[] | WidgetType>;
  settings?: Maybe<String>;
  settings_not?: Maybe<String>;
  settings_in?: Maybe<String[] | String>;
  settings_not_in?: Maybe<String[] | String>;
  settings_lt?: Maybe<String>;
  settings_lte?: Maybe<String>;
  settings_gt?: Maybe<String>;
  settings_gte?: Maybe<String>;
  settings_contains?: Maybe<String>;
  settings_not_contains?: Maybe<String>;
  settings_starts_with?: Maybe<String>;
  settings_not_starts_with?: Maybe<String>;
  settings_ends_with?: Maybe<String>;
  settings_not_ends_with?: Maybe<String>;
  AND?: Maybe<WidgetWhereInput[] | WidgetWhereInput>;
  OR?: Maybe<WidgetWhereInput[] | WidgetWhereInput>;
  NOT?: Maybe<WidgetWhereInput[] | WidgetWhereInput>;
}

export interface WidgetUpdateManyWithWhereNestedInput {
  where: WidgetScalarWhereInput;
  data: WidgetUpdateManyDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  type?: Maybe<UserType>;
  type_not?: Maybe<UserType>;
  type_in?: Maybe<UserType[] | UserType>;
  type_not_in?: Maybe<UserType[] | UserType>;
  widgets_every?: Maybe<WidgetWhereInput>;
  widgets_some?: Maybe<WidgetWhereInput>;
  widgets_none?: Maybe<WidgetWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface WidgetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<WidgetType>;
  type_not?: Maybe<WidgetType>;
  type_in?: Maybe<WidgetType[] | WidgetType>;
  type_not_in?: Maybe<WidgetType[] | WidgetType>;
  settings?: Maybe<String>;
  settings_not?: Maybe<String>;
  settings_in?: Maybe<String[] | String>;
  settings_not_in?: Maybe<String[] | String>;
  settings_lt?: Maybe<String>;
  settings_lte?: Maybe<String>;
  settings_gt?: Maybe<String>;
  settings_gte?: Maybe<String>;
  settings_contains?: Maybe<String>;
  settings_not_contains?: Maybe<String>;
  settings_starts_with?: Maybe<String>;
  settings_not_starts_with?: Maybe<String>;
  settings_ends_with?: Maybe<String>;
  settings_not_ends_with?: Maybe<String>;
  AND?: Maybe<WidgetScalarWhereInput[] | WidgetScalarWhereInput>;
  OR?: Maybe<WidgetScalarWhereInput[] | WidgetScalarWhereInput>;
  NOT?: Maybe<WidgetScalarWhereInput[] | WidgetScalarWhereInput>;
}

export interface WidgetUpdateWithWhereUniqueNestedInput {
  where: WidgetWhereUniqueInput;
  data: WidgetUpdateDataInput;
}

export interface WidgetUpsertWithWhereUniqueNestedInput {
  where: WidgetWhereUniqueInput;
  update: WidgetUpdateDataInput;
  create: WidgetCreateInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface WidgetUpdateInput {
  type?: Maybe<WidgetType>;
  settings?: Maybe<String>;
}

export interface WidgetUpdateManyDataInput {
  type?: Maybe<WidgetType>;
  settings?: Maybe<String>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  type?: Maybe<UserType>;
  widgets?: Maybe<WidgetUpdateManyInput>;
}

export interface WidgetCreateInput {
  id?: Maybe<ID_Input>;
  type: WidgetType;
  settings: String;
}

export interface WidgetCreateManyInput {
  create?: Maybe<WidgetCreateInput[] | WidgetCreateInput>;
  connect?: Maybe<WidgetWhereUniqueInput[] | WidgetWhereUniqueInput>;
}

export interface WidgetUpdateDataInput {
  type?: Maybe<WidgetType>;
  settings?: Maybe<String>;
}

export type WidgetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  type?: Maybe<UserType>;
}

export interface WidgetUpdateManyMutationInput {
  type?: Maybe<WidgetType>;
  settings?: Maybe<String>;
}

export interface WidgetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WidgetWhereInput>;
  AND?: Maybe<WidgetSubscriptionWhereInput[] | WidgetSubscriptionWhereInput>;
  OR?: Maybe<WidgetSubscriptionWhereInput[] | WidgetSubscriptionWhereInput>;
  NOT?: Maybe<WidgetSubscriptionWhereInput[] | WidgetSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WidgetPreviousValues {
  id: ID_Output;
  type: WidgetType;
  settings: String;
}

export interface WidgetPreviousValuesPromise
  extends Promise<WidgetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<WidgetType>;
  settings: () => Promise<String>;
}

export interface WidgetPreviousValuesSubscription
  extends Promise<AsyncIterator<WidgetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<WidgetType>>;
  settings: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface WidgetSubscriptionPayload {
  mutation: MutationType;
  node: Widget;
  updatedFields: String[];
  previousValues: WidgetPreviousValues;
}

export interface WidgetSubscriptionPayloadPromise
  extends Promise<WidgetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WidgetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WidgetPreviousValuesPromise>() => T;
}

export interface WidgetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WidgetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WidgetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WidgetPreviousValuesSubscription>() => T;
}

export interface Widget {
  id: ID_Output;
  type: WidgetType;
  settings: String;
}

export interface WidgetPromise extends Promise<Widget>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<WidgetType>;
  settings: () => Promise<String>;
}

export interface WidgetSubscription
  extends Promise<AsyncIterator<Widget>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<WidgetType>>;
  settings: () => Promise<AsyncIterator<String>>;
}

export interface WidgetNullablePromise
  extends Promise<Widget | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<WidgetType>;
  settings: () => Promise<String>;
}

export interface WidgetEdge {
  node: Widget;
  cursor: String;
}

export interface WidgetEdgePromise extends Promise<WidgetEdge>, Fragmentable {
  node: <T = WidgetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WidgetEdgeSubscription
  extends Promise<AsyncIterator<WidgetEdge>>,
    Fragmentable {
  node: <T = WidgetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  type?: UserType;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  type: () => Promise<UserType>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<UserType>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  type?: UserType;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  type: () => Promise<UserType>;
  widgets: <T = FragmentableArray<Widget>>(args?: {
    where?: WidgetWhereInput;
    orderBy?: WidgetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<UserType>>;
  widgets: <T = Promise<AsyncIterator<WidgetSubscription>>>(args?: {
    where?: WidgetWhereInput;
    orderBy?: WidgetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  type: () => Promise<UserType>;
  widgets: <T = FragmentableArray<Widget>>(args?: {
    where?: WidgetWhereInput;
    orderBy?: WidgetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WidgetConnection {
  pageInfo: PageInfo;
  edges: WidgetEdge[];
}

export interface WidgetConnectionPromise
  extends Promise<WidgetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WidgetEdge>>() => T;
  aggregate: <T = AggregateWidgetPromise>() => T;
}

export interface WidgetConnectionSubscription
  extends Promise<AsyncIterator<WidgetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WidgetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWidgetSubscription>() => T;
}

export interface AggregateWidget {
  count: Int;
}

export interface AggregateWidgetPromise
  extends Promise<AggregateWidget>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWidgetSubscription
  extends Promise<AsyncIterator<AggregateWidget>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "WidgetType",
    embedded: false
  },
  {
    name: "Widget",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
