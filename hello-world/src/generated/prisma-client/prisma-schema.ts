// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateUser {
  count: Int!
}

type AggregateWidget {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWidget(data: WidgetCreateInput!): Widget!
  updateWidget(data: WidgetUpdateInput!, where: WidgetWhereUniqueInput!): Widget
  updateManyWidgets(data: WidgetUpdateManyMutationInput!, where: WidgetWhereInput): BatchPayload!
  upsertWidget(where: WidgetWhereUniqueInput!, create: WidgetCreateInput!, update: WidgetUpdateInput!): Widget!
  deleteWidget(where: WidgetWhereUniqueInput!): Widget
  deleteManyWidgets(where: WidgetWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  widget(where: WidgetWhereUniqueInput!): Widget
  widgets(where: WidgetWhereInput, orderBy: WidgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Widget]!
  widgetsConnection(where: WidgetWhereInput, orderBy: WidgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WidgetConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  widget(where: WidgetSubscriptionWhereInput): WidgetSubscriptionPayload
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  type: UserType
  widgets(where: WidgetWhereInput, orderBy: WidgetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Widget!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  type: UserType
  widgets: WidgetCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  type_ASC
  type_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  type: UserType
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

enum UserType {
  USER
  ADMIN
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  type: UserType
  widgets: WidgetUpdateManyInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  password: String
  type: UserType
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  type: UserType
  type_not: UserType
  type_in: [UserType!]
  type_not_in: [UserType!]
  widgets_every: WidgetWhereInput
  widgets_some: WidgetWhereInput
  widgets_none: WidgetWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Widget {
  id: ID!
  type: WidgetType!
  settings: String!
}

type WidgetConnection {
  pageInfo: PageInfo!
  edges: [WidgetEdge]!
  aggregate: AggregateWidget!
}

input WidgetCreateInput {
  id: ID
  type: WidgetType!
  settings: String!
}

input WidgetCreateManyInput {
  create: [WidgetCreateInput!]
  connect: [WidgetWhereUniqueInput!]
}

type WidgetEdge {
  node: Widget!
  cursor: String!
}

enum WidgetOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  settings_ASC
  settings_DESC
}

type WidgetPreviousValues {
  id: ID!
  type: WidgetType!
  settings: String!
}

input WidgetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: WidgetType
  type_not: WidgetType
  type_in: [WidgetType!]
  type_not_in: [WidgetType!]
  settings: String
  settings_not: String
  settings_in: [String!]
  settings_not_in: [String!]
  settings_lt: String
  settings_lte: String
  settings_gt: String
  settings_gte: String
  settings_contains: String
  settings_not_contains: String
  settings_starts_with: String
  settings_not_starts_with: String
  settings_ends_with: String
  settings_not_ends_with: String
  AND: [WidgetScalarWhereInput!]
  OR: [WidgetScalarWhereInput!]
  NOT: [WidgetScalarWhereInput!]
}

type WidgetSubscriptionPayload {
  mutation: MutationType!
  node: Widget
  updatedFields: [String!]
  previousValues: WidgetPreviousValues
}

input WidgetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WidgetWhereInput
  AND: [WidgetSubscriptionWhereInput!]
  OR: [WidgetSubscriptionWhereInput!]
  NOT: [WidgetSubscriptionWhereInput!]
}

enum WidgetType {
  WEATHER
  EXCHANGER
  CRYPTOEXCHANGER
  CALCULATOR
  PASSWORD
  RANDOMTHING
  JOKE
}

input WidgetUpdateDataInput {
  type: WidgetType
  settings: String
}

input WidgetUpdateInput {
  type: WidgetType
  settings: String
}

input WidgetUpdateManyDataInput {
  type: WidgetType
  settings: String
}

input WidgetUpdateManyInput {
  create: [WidgetCreateInput!]
  update: [WidgetUpdateWithWhereUniqueNestedInput!]
  upsert: [WidgetUpsertWithWhereUniqueNestedInput!]
  delete: [WidgetWhereUniqueInput!]
  connect: [WidgetWhereUniqueInput!]
  set: [WidgetWhereUniqueInput!]
  disconnect: [WidgetWhereUniqueInput!]
  deleteMany: [WidgetScalarWhereInput!]
  updateMany: [WidgetUpdateManyWithWhereNestedInput!]
}

input WidgetUpdateManyMutationInput {
  type: WidgetType
  settings: String
}

input WidgetUpdateManyWithWhereNestedInput {
  where: WidgetScalarWhereInput!
  data: WidgetUpdateManyDataInput!
}

input WidgetUpdateWithWhereUniqueNestedInput {
  where: WidgetWhereUniqueInput!
  data: WidgetUpdateDataInput!
}

input WidgetUpsertWithWhereUniqueNestedInput {
  where: WidgetWhereUniqueInput!
  update: WidgetUpdateDataInput!
  create: WidgetCreateInput!
}

input WidgetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: WidgetType
  type_not: WidgetType
  type_in: [WidgetType!]
  type_not_in: [WidgetType!]
  settings: String
  settings_not: String
  settings_in: [String!]
  settings_not_in: [String!]
  settings_lt: String
  settings_lte: String
  settings_gt: String
  settings_gte: String
  settings_contains: String
  settings_not_contains: String
  settings_starts_with: String
  settings_not_starts_with: String
  settings_ends_with: String
  settings_not_ends_with: String
  AND: [WidgetWhereInput!]
  OR: [WidgetWhereInput!]
  NOT: [WidgetWhereInput!]
}

input WidgetWhereUniqueInput {
  id: ID
}
`